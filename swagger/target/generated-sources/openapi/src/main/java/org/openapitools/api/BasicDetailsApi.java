/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.BasicDetails;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-13T23:56:49.522843800+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "basic-details", description = "Partner details")
public interface BasicDetailsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /basic-details/create : Add a new basic details to the application
     * Add a new basic details to the application
     *
     * @param basicDetails Create a new basic details in the application (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addBasicDetails",
        summary = "Add a new basic details to the application",
        description = "Add a new basic details to the application",
        tags = { "basic-details" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Integer.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/basic-details/create",
        produces = { "text/plain" },
        consumes = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<Integer> addBasicDetails(
        @Parameter(name = "BasicDetails", description = "Create a new basic details in the application", required = true) @Valid @RequestBody BasicDetails basicDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /basic-details/delete/{partnerKey} : Deletes a basic details
     * delete a basic details
     *
     * @param partnerKey ID of basic details to return (required)
     * @return Successful deletion (status code 200)
     *         or Invalid value (status code 400)
     */
    @Operation(
        operationId = "deleteBasicDetails",
        summary = "Deletes a basic details",
        description = "delete a basic details",
        tags = { "basic-details" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful deletion"),
            @ApiResponse(responseCode = "400", description = "Invalid value")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/basic-details/delete/{partnerKey}"
    )
    
    default ResponseEntity<Void> deleteBasicDetails(
        @Parameter(name = "partnerKey", description = "ID of basic details to return", required = true, in = ParameterIn.PATH) @PathVariable("partnerKey") Long partnerKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /basic-details/get/{partnerKey} : Find basic details by ID
     * Returns a single basic details
     *
     * @param partnerKey ID of basic details to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or basic details not found (status code 404)
     */
    @Operation(
        operationId = "getBasicDetailsById",
        summary = "Find basic details by ID",
        description = "Returns a single basic details",
        tags = { "basic-details" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicDetails.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = BasicDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "basic details not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/basic-details/get/{partnerKey}",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<BasicDetails> getBasicDetailsById(
        @Parameter(name = "partnerKey", description = "ID of basic details to return", required = true, in = ParameterIn.PATH) @PathVariable("partnerKey") Long partnerKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"Souvik\", \"lastName\" : \"Basu\", \"partnerKey\" : 111, \"dob\" : \"2023-12-15\", \"age\" : 10 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BasicDetails> <partnerKey>111</partnerKey> <firstName>Souvik</firstName> <lastName>Basu</lastName> <age>10</age> <dob>2023-12-15</dob> </BasicDetails>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /basic-details/update/{partnerKey} : Update an existing basic details
     * Update an existing basic details by Id
     *
     * @param partnerKey ID of basic details to return (required)
     * @param basicDetails Update an existent basic details in the application (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or basic details not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateBasicDetails",
        summary = "Update an existing basic details",
        description = "Update an existing basic details by Id",
        tags = { "basic-details" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicDetails.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = BasicDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "basic details not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/basic-details/update/{partnerKey}",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<BasicDetails> updateBasicDetails(
        @Parameter(name = "partnerKey", description = "ID of basic details to return", required = true, in = ParameterIn.PATH) @PathVariable("partnerKey") Long partnerKey,
        @Parameter(name = "BasicDetails", description = "Update an existent basic details in the application", required = true) @Valid @RequestBody BasicDetails basicDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"Souvik\", \"lastName\" : \"Basu\", \"partnerKey\" : 111, \"dob\" : \"2023-12-15\", \"age\" : 10 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BasicDetails> <partnerKey>111</partnerKey> <firstName>Souvik</firstName> <lastName>Basu</lastName> <age>10</age> <dob>2023-12-15</dob> </BasicDetails>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
